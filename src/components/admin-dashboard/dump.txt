import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Download,
  Filter,
  DollarSign,
  TrendingUp,
  ChevronUp,
  ChevronDown,
  BarChart3,
  CircleDollarSign,
  CreditCard,
} from "lucide-react";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";

// Type definitions
type SubscriptionPlan = {
  id: string;
  name: string;
  price: number;
};

type UserSubscription = {
  id: string;
  plan_id: string;
  status: string;
};

type PlanStats = {
  name: string;
  subscribers: number;
  monthlyRevenue: number;
  growth?: number; // We might calculate this later if you track historical data
};

const AdminFinancials = () => {
  const [timeRange, setTimeRange] = useState("month");
  const [storeFilter, setStoreFilter] = useState("all");
  const [planStats, setPlanStats] = useState<PlanStats[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [revenueData, setRevenueData] = useState([]);

  // Mock store revenue data
  const storeRevenueData = [
    { name: "Chicago Arcade", revenue: 125000, share: 20.5 },
    { name: "Seattle VR Zone", revenue: 110000, share: 18.0 },
    { name: "Austin Gaming Center", revenue: 98000, share: 16.1 },
    { name: "Miami Game Room", revenue: 87000, share: 14.3 },
    { name: "Denver Arcades", revenue: 79000, share: 13.0 },
    { name: "LA Gaming Hub", revenue: 72000, share: 11.8 },
    { name: "NYC VR Experience", revenue: 38000, share: 6.3 },
  ];

  useEffect(() => {
    const fetchSubscriptionData = async () => {
      try {
        // Fetch active subscriptions and join with plans
        const { data: subscriptionData, error: subscriptionError } =
          await supabase
            .from("user_subscriptions")
            .select(
              `
            id,
            status,
            subscription_plans (
              id,
              name,
              price
            )
          `
            )
            .eq("status", "active"); // Assuming 'active' is the status for active subscriptions

        if (subscriptionError) throw subscriptionError;

        // Process the data to get stats per plan
        const planMap = new Map<string, PlanStats>();

        subscriptionData?.forEach((sub: any) => {
          const plan = sub.subscription_plans;
          if (!planMap.has(plan.id)) {
            planMap.set(plan.id, {
              name: plan.name,
              subscribers: 1,
              monthlyRevenue: plan.price,
            });
          } else {
            const existing = planMap.get(plan.id)!;
            planMap.set(plan.id, {
              ...existing,
              subscribers: existing.subscribers + 1,
              monthlyRevenue: existing.monthlyRevenue + plan.price,
            });
          }
        });

        setPlanStats(Array.from(planMap.values()));
      } catch (error) {
        console.error("Error fetching subscription data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchSubscriptionData();
  }, []);

    useEffect(() => {
        const fetchFinancialData = async () => {
        try {
            const { data: financesData, error } = await supabase
            .from("finances")
            .select("*")
            .order("date", { ascending: true });

            if (error) throw error;

            // Simplified processing - just use amount for all metrics
            const monthlyData = financesData.reduce((acc, curr) => {
            const month = new Date(curr.date).toLocaleString("en-US", {
                month: "short",
            });

            if (!acc[month]) {
                acc[month] = {
                month,
                revenue: Number(curr.amount),
                expenses: Number(curr.amount),
                profit: Number(curr.amount),
                };
            } else {
                acc[month].revenue += Number(curr.amount);
                acc[month].expenses += Number(curr.amount);
                acc[month].profit += Number(curr.amount);
            }

            return acc;
            }, {});

            // Convert to array and sort by month
            const monthOrder = [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
            ];
            const processedData = Object.values(monthlyData).sort(
            (a, b) => monthOrder.indexOf(a.month) - monthOrder.indexOf(b.month)
            );

            setRevenueData(processedData);
        } catch (error) {
            console.error("Error fetching financial data:", error);
            toast.error("Failed to load financial data");
        }
        };

        fetchFinancialData();
    }, [timeRange]);

  const handleExportData = () => {
    toast.success("Exporting financial data...");
  };

  if (isLoading) {
    return <div>Loading subscription data...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold text-white">Financial Analytics</h2>
        <Button
          variant="outline"
          className="bg-transparent border-slate-700 text-slate-300 hover:bg-slate-700"
          onClick={handleExportData}
        >
          <Download className="h-4 w-4 mr-2" />
          Export Data
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {/* Total Revenue Card */}
        <Card className="bg-slate-800 border-slate-700 shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-slate-200 font-medium">
              Total Revenue
            </CardTitle>
            <DollarSign className="h-5 w-5 text-green-400" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-white">$1,073,000</div>
            <div className="flex items-center mt-2">
              <div className="flex items-center text-green-500 mr-3">
                <ChevronUp className="h-4 w-4" />
                <span className="text-xs font-medium">12.5%</span>
              </div>
              <span className="text-xs text-slate-400">vs previous year</span>
            </div>
          </CardContent>
        </Card>

        {/* Net Profit Card */}
        <Card className="bg-slate-800 border-slate-700 shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-slate-200 font-medium">
              Net Profit
            </CardTitle>
            <TrendingUp className="h-5 w-5 text-violet-400" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-white">$611,000</div>
            <div className="flex items-center mt-2">
              <div className="flex items-center text-green-500 mr-3">
                <ChevronUp className="h-4 w-4" />
                <span className="text-xs font-medium">8.3%</span>
              </div>
              <span className="text-xs text-slate-400">vs previous year</span>
            </div>
          </CardContent>
        </Card>

        {/* Average Store Revenue Card */}
        <Card className="bg-slate-800 border-slate-700 shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-slate-200 font-medium">
              Avg. Store Revenue
            </CardTitle>
            <BarChart3 className="h-5 w-5 text-blue-400" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-white">$87,500</div>
            <div className="flex items-center mt-2">
              <div className="flex items-center text-amber-500 mr-3">
                <ChevronUp className="h-4 w-4" />
                <span className="text-xs font-medium">5.2%</span>
              </div>
              <span className="text-xs text-slate-400">per store monthly</span>
            </div>
          </CardContent>
        </Card>

        {/* Subscription Revenue Card */}
        <Card className="bg-slate-800 border-slate-700 shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
            <CardTitle className="text-slate-200 font-medium">
              Subscription Revenue
            </CardTitle>
            <CreditCard className="h-5 w-5 text-emerald-400" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-white">$267,000</div>
            <div className="flex items-center mt-2">
              <div className="flex items-center text-green-500 mr-3">
                <ChevronUp className="h-4 w-4" />
                <span className="text-xs font-medium">17.8%</span>
              </div>
              <span className="text-xs text-slate-400">recurring annual</span>
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="revenue" className="space-y-6">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <TabsList className="bg-slate-800 border border-slate-700">
            <TabsTrigger
              value="revenue"
              className="data-[state=active]:bg-slate-700"
            >
              <CircleDollarSign className="h-4 w-4 mr-2" />
              Revenue
            </TabsTrigger>
            <TabsTrigger
              value="subscriptions"
              className="data-[state=active]:bg-slate-700"
            >
              <CreditCard className="h-4 w-4 mr-2" />
              Subscriptions
            </TabsTrigger>
            <TabsTrigger
              value="stores"
              className="data-[state=active]:bg-slate-700"
            >
              <BarChart3 className="h-4 w-4 mr-2" />
              Store Performance
            </TabsTrigger>
          </TabsList>

          <div className="flex gap-2">
            <Select value={timeRange} onValueChange={setTimeRange}>
              <SelectTrigger className="w-[140px] bg-slate-900 border-slate-700 text-slate-300">
                <Filter className="h-4 w-4 mr-2" />
                <span>Time Range</span>
              </SelectTrigger>
              <SelectContent className="bg-slate-900 border-slate-700">
                <SelectItem value="week">This Week</SelectItem>
                <SelectItem value="month">This Month</SelectItem>
                <SelectItem value="quarter">This Quarter</SelectItem>
                <SelectItem value="year">This Year</SelectItem>
                <SelectItem value="all">All Time</SelectItem>
              </SelectContent>
            </Select>

            <Select value={storeFilter} onValueChange={setStoreFilter}>
              <SelectTrigger className="w-[140px] bg-slate-900 border-slate-700 text-slate-300">
                <Filter className="h-4 w-4 mr-2" />
                <span>Store Filter</span>
              </SelectTrigger>
              <SelectContent className="bg-slate-900 border-slate-700">
                <SelectItem value="all">All Stores</SelectItem>
                <SelectItem value="chicago">Chicago</SelectItem>
                <SelectItem value="seattle">Seattle</SelectItem>
                <SelectItem value="austin">Austin</SelectItem>
                <SelectItem value="miami">Miami</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <TabsContent value="revenue" className="space-y-6">
          <Card className="bg-slate-800 border-slate-700 shadow-lg">
            <CardHeader>
              <CardTitle className="text-slate-200">Revenue Overview</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={revenueData}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                    <XAxis dataKey="month" stroke="#999" />
                    <YAxis stroke="#999" />
                    <Tooltip
                      contentStyle={{
                        backgroundColor: "#222",
                        borderColor: "#666",
                        color: "#fff",
                      }}
                    />
                    <Legend />
                    <Bar dataKey="revenue" name="Revenue" fill="#8b5cf6" />
                    <Bar dataKey="expenses" name="Expenses" fill="#ef4444" />
                    <Bar dataKey="profit" name="Profit" fill="#10b981" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="subscriptions" className="space-y-6">
          <Card className="bg-slate-800 border-slate-700 shadow-lg">
            <CardHeader>
              <CardTitle className="text-slate-200">
                Subscription Analytics
              </CardTitle>
            </CardHeader>
            <CardContent>
              <table className="w-full">
                <thead>
                  <tr className="border-b border-slate-700">
                    <th className="text-left py-3 text-sm text-slate-400">
                      Plan
                    </th>
                    <th className="text-left py-3 text-sm text-slate-400">
                      Subscribers
                    </th>
                    <th className="text-left py-3 text-sm text-slate-400">
                      Monthly Revenue
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {planStats.map((plan) => (
                    <tr key={plan.name} className="border-b border-slate-700">
                      <td className="py-3 text-slate-300">{plan.name}</td>
                      <td className="py-3 text-slate-300">
                        {plan.subscribers}
                      </td>
                      <td className="py-3 text-slate-300">
                        ${plan.monthlyRevenue.toLocaleString()}
                      </td>
                    </tr>
                  ))}
                  {planStats.length === 0 && (
                    <tr>
                      <td
                        colSpan={3}
                        className="py-3 text-slate-300 text-center"
                      >
                        No active subscriptions found
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="stores" className="space-y-6">
          <Card className="bg-slate-800 border-slate-700 shadow-lg">
            <CardHeader>
              <CardTitle className="text-slate-200">
                Store Financial Performance
              </CardTitle>
            </CardHeader>
            <CardContent>
              <table className="w-full mb-6">
                <thead>
                  <tr className="border-b border-slate-700">
                    <th className="text-left py-3 text-sm text-slate-400">
                      Store
                    </th>
                    <th className="text-left py-3 text-sm text-slate-400">
                      Revenue
                    </th>
                    <th className="text-left py-3 text-sm text-slate-400">
                      % of Total
                    </th>
                    <th className="text-left py-3 text-sm text-slate-400">
                      Monthly Growth
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {storeRevenueData.map((store, index) => (
                    <tr key={index} className="border-b border-slate-700">
                      <td className="py-3 text-slate-300">{store.name}</td>
                      <td className="py-3 text-slate-300">
                        ${store.revenue.toLocaleString()}
                      </td>
                      <td className="py-3 text-slate-300">
                        {store.share.toFixed(1)}%
                      </td>
                      <td className="py-3">
                        <span
                          className={`inline-flex items-center ${
                            index % 3 === 0 ? "text-red-500" : "text-green-500"
                          }`}
                        >
                          {index % 3 === 0 ? (
                            <ChevronDown className="h-4 w-4" />
                          ) : (
                            <ChevronUp className="h-4 w-4" />
                          )}
                          <span>{(Math.random() * 15).toFixed(1)}%</span>
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              <div className="pt-4 border-t border-slate-700">
                <h3 className="text-slate-300 font-medium mb-2">
                  Revenue Distribution
                </h3>
                <div className="h-[250px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={storeRevenueData}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                      layout="vertical"
                    >
                      <CartesianGrid
                        strokeDasharray="3 3"
                        stroke="#444"
                        horizontal={false}
                      />
                      <XAxis type="number" stroke="#999" />
                      <YAxis
                        dataKey="name"
                        type="category"
                        stroke="#999"
                        width={150}
                      />
                      <Tooltip
                        contentStyle={{
                          backgroundColor: "#222",
                          borderColor: "#666",
                          color: "#fff",
                        }}
                      />
                      <Bar dataKey="revenue" name="Revenue" fill="#8b5cf6" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default AdminFinancials;
